from typing import Any, TypeVar, Union

from attrs import define as _attrs_define
from attrs import field as _attrs_field

from ..models.event_protocols import EventProtocols
from ..models.log_event_type import LogEventType
from ..types import UNSET, Unset

T = TypeVar("T", bound="LogEvent")


@_attrs_define
class LogEvent:
    """
    Attributes:
        id (Union[Unset, str]):
        timestamp (Union[Unset, int]): unix timestamp in nanoseconds
        event (Union[Unset, LogEventType]): Event status:
              * `1` - Login failed
              * `2` - Login failed non-existent user
              * `3` - No login tried
              * `4` - Algorithm negotiation failed
              * `5` - Login succeeded
        protocol (Union[Unset, EventProtocols]): Protocols:
              * `SSH` - SSH commands
              * `SFTP` - SFTP protocol
              * `SCP` - SCP protocol
              * `FTP` - plain FTP and FTPES/FTPS
              * `DAV` - WebDAV
              * `HTTP` - WebClient/REST API
              * `HTTPShare` - the event is generated in a public share
              * `DataRetention` - the event is generated by a data retention check
              * `EventAction` - the event is generated by an EventManager action
              * `OIDC` - OpenID Connect
        username (Union[Unset, str]):
        ip (Union[Unset, str]):
        message (Union[Unset, str]):
        role (Union[Unset, str]):
        instance_id (Union[Unset, str]):
    """

    id: Union[Unset, str] = UNSET
    timestamp: Union[Unset, int] = UNSET
    event: Union[Unset, LogEventType] = UNSET
    protocol: Union[Unset, EventProtocols] = UNSET
    username: Union[Unset, str] = UNSET
    ip: Union[Unset, str] = UNSET
    message: Union[Unset, str] = UNSET
    role: Union[Unset, str] = UNSET
    instance_id: Union[Unset, str] = UNSET
    additional_properties: dict[str, Any] = _attrs_field(init=False, factory=dict)

    def to_dict(self) -> dict[str, Any]:
        id = self.id

        timestamp = self.timestamp

        event: Union[Unset, int] = UNSET
        if not isinstance(self.event, Unset):
            event = self.event.value

        protocol: Union[Unset, str] = UNSET
        if not isinstance(self.protocol, Unset):
            protocol = self.protocol.value

        username = self.username

        ip = self.ip

        message = self.message

        role = self.role

        instance_id = self.instance_id

        field_dict: dict[str, Any] = {}
        field_dict.update(self.additional_properties)
        field_dict.update({})
        if id is not UNSET:
            field_dict["id"] = id
        if timestamp is not UNSET:
            field_dict["timestamp"] = timestamp
        if event is not UNSET:
            field_dict["event"] = event
        if protocol is not UNSET:
            field_dict["protocol"] = protocol
        if username is not UNSET:
            field_dict["username"] = username
        if ip is not UNSET:
            field_dict["ip"] = ip
        if message is not UNSET:
            field_dict["message"] = message
        if role is not UNSET:
            field_dict["role"] = role
        if instance_id is not UNSET:
            field_dict["instance_id"] = instance_id

        return field_dict

    @classmethod
    def from_dict(cls: type[T], src_dict: dict[str, Any]) -> T:
        d = src_dict.copy()
        id = d.pop("id", UNSET)

        timestamp = d.pop("timestamp", UNSET)

        _event = d.pop("event", UNSET)
        event: Union[Unset, LogEventType]
        if isinstance(_event, Unset):
            event = UNSET
        else:
            event = LogEventType(_event)

        _protocol = d.pop("protocol", UNSET)
        protocol: Union[Unset, EventProtocols]
        if isinstance(_protocol, Unset):
            protocol = UNSET
        else:
            protocol = EventProtocols(_protocol)

        username = d.pop("username", UNSET)

        ip = d.pop("ip", UNSET)

        message = d.pop("message", UNSET)

        role = d.pop("role", UNSET)

        instance_id = d.pop("instance_id", UNSET)

        log_event = cls(
            id=id,
            timestamp=timestamp,
            event=event,
            protocol=protocol,
            username=username,
            ip=ip,
            message=message,
            role=role,
            instance_id=instance_id,
        )

        log_event.additional_properties = d
        return log_event

    @property
    def additional_keys(self) -> list[str]:
        return list(self.additional_properties.keys())

    def __getitem__(self, key: str) -> Any:
        return self.additional_properties[key]

    def __setitem__(self, key: str, value: Any) -> None:
        self.additional_properties[key] = value

    def __delitem__(self, key: str) -> None:
        del self.additional_properties[key]

    def __contains__(self, key: str) -> bool:
        return key in self.additional_properties
